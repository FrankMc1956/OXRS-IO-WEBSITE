"use strict";(self.webpackChunkoxrs_docs_site=self.webpackChunkoxrs_docs_site||[]).push([[598],{8047:(n,t,e)=>{e.r(t),e.d(t,{data:()=>s});const s={key:"v-6dbe2508",path:"/docs/firmware/smoke-detector-esp32.html",title:"Smoke Detector ESP32",lang:"en-US",frontmatter:{tags:["OXRS-SHA-RACK32","RACK32"]},excerpt:"",headers:[{level:2,title:"Introduction",slug:"introduction",children:[{level:3,title:"How does it work?",slug:"how-does-it-work",children:[]},{level:3,title:"Interlocking",slug:"interlocking",children:[]},{level:3,title:"Timers",slug:"timers",children:[]}]},{level:2,title:"Configuration",slug:"configuration",children:[{level:3,title:"Input Config",slug:"input-config",children:[]},{level:3,title:"Output Config",slug:"output-config",children:[]},{level:3,title:"Examples",slug:"examples",children:[]}]},{level:2,title:"Commands",slug:"commands",children:[{level:3,title:"Outputs",slug:"outputs",children:[]},{level:3,title:"Examples",slug:"examples-1",children:[]}]},{level:2,title:"Events",slug:"events",children:[{level:3,title:"Input Events",slug:"input-events",children:[]},{level:3,title:"Output Events",slug:"output-events",children:[]},{level:3,title:"Examples",slug:"examples-2",children:[]}]},{level:2,title:"Downloads",slug:"downloads",children:[]},{level:2,title:"Supported Hardware",slug:"supported-hardware",children:[]}],filePathRelative:"docs/firmware/smoke-detector-esp32.md",git:{updatedTime:1632363875e3,contributors:[{name:"ben",email:"ben.jones12@gmail.com",commits:5},{name:"Ben Jones",email:"sumnerboy12@users.noreply.github.com",commits:1}]}}},8323:(n,t,e)=>{e.r(t),e.d(t,{default:()=>H});var s=e(6252);const a=(0,s.uE)('<h1 id="smoke-detector-esp32" tabindex="-1"><a class="header-anchor" href="#smoke-detector-esp32" aria-hidden="true">#</a> Smoke Detector ESP32</h1><p class="maker">by <b>Ben Jones</b></p><blockquote><p>SKU: OXRS-BMD-SMOKEDETECTOR-ESP32-FW</p></blockquote><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),o=(0,s.Uk)("Originally designed to work with "),p={href:"https://www.clipsal.com/products/detail?CatNo=755PSMA4",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("Clipsal FireTek Smoke Alarms"),d=(0,s.Uk)(" fitted with the "),l={href:"https://www.clipsal.com/products/detail?CatNo=755RB",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("Clipsal Fire Tek Mounting/Relay Base"),i=(0,s.Uk)("."),u=(0,s.uE)('<p>A single CAT5/6 cable can be used to monitor the alarm state, as well as trigger the remote TEST/HUSH functions (i.e. 2x outputs, 1x input per port).</p><p>Each port on a Smoke Detector 16-port (SD16) can control 2 outputs and monitor 1 input and are numbered;</p><table><thead><tr><th>INDEX</th><th>PORT</th><th>CHANNEL</th><th>TYPE</th><th>RJ45 Pin</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>Output</td><td>2</td></tr><tr><td>2</td><td>1</td><td>2</td><td>Output</td><td>3</td></tr><tr><td>3</td><td>1</td><td>3</td><td>Input</td><td>6</td></tr><tr><td>4</td><td>2</td><td>1</td><td>Output</td><td>2</td></tr><tr><td>5</td><td>2</td><td>2</td><td>Output</td><td>3</td></tr><tr><td>6</td><td>2</td><td>3</td><td>Input</td><td>6</td></tr><tr><td>...</td><td></td><td></td><td></td><td></td></tr><tr><td>46</td><td>16</td><td>1</td><td>Output</td><td>2</td></tr><tr><td>47</td><td>16</td><td>2</td><td>Output</td><td>3</td></tr><tr><td>48</td><td>16</td><td>3</td><td>Input</td><td>6</td></tr></tbody></table><hr><h3 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h3><p>When an input state change is detected an MQTT message is published to the configured MQTT broker for further processing by your home automation system.</p><p>Outputs can be switched by publishing an MQTT message to the configured MQTT broker. Each output can be configured as a <code>relay</code>, for simple <code>on</code>/<code>off</code> control. A <code>motor</code>, again with <code>on</code>/<code>off</code> control but longer interlock delays if interlocking is configured. Or a <code>timer</code>, for <code>on</code> and then timed <code>off</code> control.</p><h3 id="interlocking" tabindex="-1"><a class="header-anchor" href="#interlocking" aria-hidden="true">#</a> Interlocking</h3><p>Interlocking two outputs allows them to control equipment such as roller blinds, garage doors, louvre roofing etc.</p><p>However if you are planning to control a motor of any sort then it is important that the two outputs are configured as type <code>motor</code> and that both are interlocked with each other. This is to ensure that both outputs will not be commanded to operate at the same time and adds a 2 second delay between any changes of output.</p><p>Example payload to confingure outputs 4 &amp; 5 to control a set of roller blinds;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;interlockIndex&quot;</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;interlockIndex&quot;</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The operation of the interlocked outputs should be verified before connecting to any external equipment. External interlocking equipment may be required for some equipment. Most importantly, the manufacturers wiring and installation guides must be adhered to.</p><h3 id="timers" tabindex="-1"><a class="header-anchor" href="#timers" aria-hidden="true">#</a> Timers</h3><p>Timers allow an output to automatically turn <code>off</code> a set number of seconds after being turned <code>on</code> (configurable via <code>timerSeconds</code>, which defaults to 60 seconds).</p><p>If another <code>on</code> command is sent while the timer is running, it will reset to zero and begin counting down again. If an <code>off</code> command is sent the timer will be cancelled and the output turned <code>off</code> immediately.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Each INPUT or OUTPUT can be configured by publishing an MQTT message to this topic:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[PREFIX/]conf/CLIENTID[/SUFFIX]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where:</p><ul><li><code>PREFIX</code>: Optional topic prefix if required</li><li><code>CLIENTID</code>: Client id of device, defaults to <code>osd-&lt;MACADDRESS&gt;</code></li><li><code>SUFFIX</code>: Optional topic suffix if required</li></ul><p>The message payload should be JSON and contain:</p><h3 id="input-config" tabindex="-1"><a class="header-anchor" href="#input-config" aria-hidden="true">#</a> Input Config</h3>',23),h=(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"Key"),(0,s._)("th",null,"Mandatory"),(0,s._)("th",null,"Value"),(0,s._)("th",null,"Default")])],-1),b=(0,s._)("tr",null,[(0,s._)("td",null,[(0,s._)("code",null,"index")]),(0,s._)("td",null,"Mandatory"),(0,s._)("td",null,"Index of the input to configure"),(0,s._)("td",null,"N/A")],-1),m=(0,s._)("tr",null,[(0,s._)("td",null,[(0,s._)("code",null,"type")]),(0,s._)("td",null,"Optional"),(0,s._)("td",null,[(0,s.Uk)("Either "),(0,s._)("code",null,"button"),(0,s.Uk)(", "),(0,s._)("code",null,"contact"),(0,s.Uk)(", "),(0,s._)("code",null,"switch"),(0,s.Uk)(" or "),(0,s._)("code",null,"toggle")]),(0,s._)("td",null,[(0,s._)("code",null,"switch")])],-1),k=(0,s._)("td",null,[(0,s._)("code",null,"invert")],-1),g=(0,s._)("td",null,"Optional",-1),f=(0,s._)("td",null,[(0,s.Uk)("Either "),(0,s._)("code",null,"true"),(0,s.Uk)(" or "),(0,s._)("code",null,"false")],-1),y=(0,s._)("code",null,"false",-1),v=(0,s.Uk)(),q=(0,s.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Inverting a normally-open (NO) button input will result in a constant stream of <code>hold</code> events!</p></div><h3 id="output-config" tabindex="-1"><a class="header-anchor" href="#output-config" aria-hidden="true">#</a> Output Config</h3><table><thead><tr><th>Key</th><th>Mandatory</th><th>Value</th><th>Default</th></tr></thead><tbody><tr><td><code>index</code></td><td>Mandatory</td><td>Index of the output to configure</td><td>N/A</td></tr><tr><td><code>type</code></td><td>Optional</td><td>Either <code>motor</code>, <code>relay</code>, or <code>timer</code></td><td><code>relay</code></td></tr><tr><td><code>interlockIndex</code></td><td>Optional</td><td>Index to interlock with (lock the opposite for interlocking both ways or self-lock to disable interlocking)</td><td>Self-locked</td></tr><tr><td><code>timerSeconds</code></td><td>Optional</td><td>Number of seconds an output stays <code>on</code> when type set to <code>timer</code></td><td>60 seconds</td></tr></tbody></table><p>The only difference between <code>motor</code> and <code>relay</code> outputs is the interlock delay (if an interlock is configured).</p><table><thead><tr><th>Output Type</th><th>Interlock delay</th></tr></thead><tbody><tr><td><code>motor</code></td><td>2000ms</td></tr><tr><td><code>relay</code></td><td>500ms</td></tr></tbody></table><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>To configure input 3 to be a contact sensor:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;contact&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To configure input 7 to be an inverted button:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;invert&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>To configure output 4 to be a 30 second timer:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;timerSeconds&quot;</span><span class="token operator">:</span> <span class="token number">30</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>To configure outputs 7 &amp; 8 to drive a motor and be interlocked:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;interlockIndex&quot;</span><span class="token operator">:</span> <span class="token number">8</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;interlockIndex&quot;</span><span class="token operator">:</span> <span class="token number">7</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>A retained message will ensure the device auto-configures on startup.</p></div><h2 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h2><h3 id="outputs" tabindex="-1"><a class="header-anchor" href="#outputs" aria-hidden="true">#</a> Outputs</h3><p>Each OUTPUT can be controlled by publishing an MQTT message to the topic;</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[PREFIX/]cmnd/CLIENTID[/SUFFIX]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where;</p><ul><li><code>PREFIX</code>: Optional topic prefix if required</li><li><code>CLIENTID</code>: Client id of device, defaults to <code>osc-&lt;MACADDRESS&gt;</code></li><li><code>SUFFIX</code>: Optional topic suffix if required</li></ul><p>The message payload should be JSON and contain:</p><table><thead><tr><th>Key</th><th>Mandatory</th><th>Value</th><th>Default</th></tr></thead><tbody><tr><td><code>index</code></td><td>Mandatory</td><td>Index of the output to switched</td><td>N/A</td></tr><tr><td><code>command</code></td><td>Mandatory</td><td>Either <code>on</code>, <code>off</code>, or <code>query</code></td><td><code>query</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The <code>query</code> command will cause an event to be published, with the current state of that output.</p></div><h3 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h3><p>To turn on output 4:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;on&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To query the state of output 7:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>An input EVENT or output STATE CHANGE is reported to a topic of the form:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[PREFIX/]stat/CLIENTID[/SUFFIX]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where;</p><ul><li><code>PREFIX</code>: Optional topic prefix if required</li><li><code>CLIENTID</code>: Client id of device, defaults to <code>osd-&lt;MACADDRESS&gt;</code></li><li><code>SUFFIX</code>: Optional topic suffix if required</li></ul><p>The message payload is JSON and contains:</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td><code>port</code></td><td>Port this event occured on (1-16)</td></tr><tr><td><code>channel</code></td><td>Channel this event occured on (1-3)</td></tr><tr><td><code>index</code></td><td>Index of this event (1-48)</td></tr><tr><td><code>type</code></td><td>Event type (see below)</td></tr><tr><td><code>event</code></td><td>Event (see below)</td></tr></tbody></table><h3 id="input-events" tabindex="-1"><a class="header-anchor" href="#input-events" aria-hidden="true">#</a> Input Events</h3><table><thead><tr><th>Event Type</th><th>Event</th></tr></thead><tbody><tr><td><code>button</code></td><td><code>single</code>, <code>double</code>, <code>triple</code>, <code>quad</code>, <code>penta</code>, or <code>hold</code></td></tr><tr><td><code>contact</code></td><td><code>open</code> or <code>closed</code></td></tr><tr><td><code>switch</code></td><td><code>on</code> or <code>off</code></td></tr><tr><td><code>toggle</code></td><td><code>toggle</code></td></tr></tbody></table><h3 id="output-events" tabindex="-1"><a class="header-anchor" href="#output-events" aria-hidden="true">#</a> Output Events</h3><table><thead><tr><th>Event Type</th><th>Event</th></tr></thead><tbody><tr><td><code>motor</code></td><td><code>on</code> or <code>off</code></td></tr><tr><td><code>relay</code></td><td><code>on</code> or <code>off</code></td></tr><tr><td><code>timer</code></td><td><code>on</code> or <code>off</code></td></tr></tbody></table><h3 id="examples-2" tabindex="-1"><a class="header-anchor" href="#examples-2" aria-hidden="true">#</a> Examples</h3><p>A contact opening on input 6;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;channel&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;contact&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;open&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>A triple button click on input 3;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;channel&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;triple&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>A relay turning on for output 7;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;relay&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;on&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>A timer turning off for output 10;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="downloads" tabindex="-1"><a class="header-anchor" href="#downloads" aria-hidden="true">#</a> Downloads</h2>',50),x=(0,s.Uk)("Download the latest version of the firmware on "),w={href:"https://github.com/Bedrock-Media-Designs/OXRS-BMD-SmokeDetector-ESP32-FW",target:"_blank",rel:"noopener noreferrer"},T=(0,s.Uk)("Github"),_=(0,s.Uk)("."),E=(0,s._)("h2",{id:"supported-hardware",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#supported-hardware","aria-hidden":"true"},"#"),(0,s.Uk)(" Supported Hardware")],-1),I=(0,s.Uk)("This firmware is compatible with the "),U={href:"https://bmdesigns.com.au/shop/universal-input-output-uio/",target:"_blank",rel:"noopener noreferrer"},S=(0,s.Uk)("Smoke Detector"),O=(0,s.Uk)(" and is designed to run on the "),C={href:"https://www.superhouse.tv/product/rack32",target:"_blank",rel:"noopener noreferrer"},D=(0,s.Uk)("Universal Rack Controller"),j=(0,s.Uk)(" (URC)."),N=(0,s.uE)('<p>The SD16 hardware provides 12V down the line, which can be used for powering sensors (e.g. PIRs), or illuminating LEDs.</p><p>There are 2 relays for each port which connect the OUTPUT wires in the cable to a shared CMN.</p><p>A sensor or switch should pull the INPUT wire in the cable to GND to indicate that it has been activated.</p><p>The SD16 hardware has physical pull up resistors to pull the INPUT wires high and detects when they are pulled low.</p><p>The RJ45 pinout for each port is;</p><table><thead><tr><th>PIN</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td>1</td><td>OUTPUT CMN</td></tr><tr><td>2</td><td>OUTPUT 1</td></tr><tr><td>3</td><td>OUTPUT 2</td></tr><tr><td>4</td><td>VIN</td></tr><tr><td>5</td><td>VIN</td></tr><tr><td>6</td><td>INPUT 1</td></tr><tr><td>7</td><td>GND</td></tr><tr><td>8</td><td>GND</td></tr></tbody></table><p>More information:</p><ul><li>https://wiki.bmdesigns.com.au/en/BMD-urc-uio</li><li>http://www.superhouse.tv/rack32</li></ul><h4 id="credits" tabindex="-1"><a class="header-anchor" href="#credits" aria-hidden="true">#</a> Credits</h4>',9),P=(0,s._)("li",null,[(0,s.Uk)("James Kennewell "),(0,s._)("a",{href:"mailto:James@bmdesigns.com.au"},"James@bmdesigns.com.au")],-1),A=(0,s.Uk)("Ben Jones "),M={href:"https://github.com/sumnerboy12",target:"_blank",rel:"noopener noreferrer"},R=(0,s.Uk)("https://github.com/sumnerboy12"),F=(0,s._)("h4",{id:"license",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#license","aria-hidden":"true"},"#"),(0,s.Uk)(" License")],-1),X=(0,s.Uk)("Copyright 2020-2021 Bedrock Media Designs Ltd "),B={href:"https://bmdesigns.com.au/",target:"_blank",rel:"noopener noreferrer"},L=(0,s.Uk)("bmdesigns.com.au"),W=(0,s._)("p",null,'The software portion of this project is licensed under the Simplified BSD License. The "licence" folder within this project contains a copy of this license in plain text format.',-1),H={render:function(n,t){const e=(0,s.up)("OutboundLink"),H=(0,s.up)("Badge");return(0,s.wg)(),(0,s.iD)(s.HY,null,[a,(0,s._)("p",null,[o,(0,s._)("a",p,[r,(0,s.Wm)(e)]),d,(0,s._)("a",l,[c,(0,s.Wm)(e)]),i]),u,(0,s._)("table",null,[h,(0,s._)("tbody",null,[b,m,(0,s._)("tr",null,[k,g,f,(0,s._)("td",null,[y,v,(0,s.Wm)(H,{text:"non-inverted"})])])])]),q,(0,s._)("p",null,[x,(0,s._)("a",w,[T,(0,s.Wm)(e)]),_]),E,(0,s._)("p",null,[I,(0,s._)("a",U,[S,(0,s.Wm)(e)]),O,(0,s._)("a",C,[D,(0,s.Wm)(e)]),j]),N,(0,s._)("ul",null,[P,(0,s._)("li",null,[A,(0,s._)("a",M,[R,(0,s.Wm)(e)])])]),F,(0,s._)("p",null,[X,(0,s._)("a",B,[L,(0,s.Wm)(e)])]),W],64)}}}}]);