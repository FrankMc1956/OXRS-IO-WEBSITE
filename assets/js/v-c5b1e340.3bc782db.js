"use strict";(self.webpackChunkoxrs_docs_site=self.webpackChunkoxrs_docs_site||[]).push([[56],{5626:(t,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-c5b1e340",path:"/docs/firmware/state-monitor-esp32.html",title:"State Monitor ESP32",lang:"en-US",frontmatter:{tags:["OXRS-SHA-RCESP32","URC","RACK32"]},excerpt:"",headers:[{level:2,title:"Introduction",slug:"introduction",children:[{level:3,title:"How does it work?",slug:"how-does-it-work",children:[]}]},{level:2,title:"Configuration",slug:"configuration",children:[{level:3,title:"Inputs",slug:"inputs",children:[]},{level:3,title:"Examples",slug:"examples",children:[]}]},{level:2,title:"Events",slug:"events",children:[{level:3,title:"Examples",slug:"examples-1",children:[]}]},{level:2,title:"Downloads",slug:"downloads",children:[]},{level:2,title:"Supported Hardware",slug:"supported-hardware",children:[]}],filePathRelative:"docs/firmware/state-monitor-esp32.md",git:{updatedTime:163182995e4,contributors:[{name:"ben",email:"ben.jones12@gmail.com",commits:4},{name:"Aaron Knox",email:"aaron_knox@me.com",commits:1}]}}},2332:(t,e,n)=>{n.r(e),n.d(e,{default:()=>J});var s=n(6252);const a=(0,s.uE)('<h1 id="state-monitor-esp32" tabindex="-1"><a class="header-anchor" href="#state-monitor-esp32" aria-hidden="true">#</a> State Monitor ESP32</h1><p class="maker">by <b>Ben Jones</b></p><blockquote><p>SKU: OXRS-SHA-STATEMONITOR-ESP32-FW</p></blockquote><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>A binary state monitor for DIY home automation projects.</p><p>This system uses UTP cable (typically Cat-5e because it&#39;s cheap) to connect binary sensors to a central controller. The sensors can be buttons or switches mounted in wall plates for lighting control, reed sensors attached to doors or windows, PIR sensors for motion detection, or anything else that reports a binary state.</p><p>It also supports rotary encoders (using 2 data lines) to allow up/down control for media player volume, light dimming, etc.</p><hr><h3 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h3><p>When an input state change is detected an MQTT message is published to the configured MQTT broker for further processing by your home automation system.</p><p>Each port can monitor up to 4 channels and are numbered:</p><table><thead><tr><th style="text-align:left;">INDEX</th><th style="text-align:left;">PORT</th><th style="text-align:left;">CHANNEL</th><th style="text-align:left;">TYPE</th><th style="text-align:left;">RJ45 Pin</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">Input</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">1</td><td style="text-align:left;">2</td><td style="text-align:left;">Input</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">1</td><td style="text-align:left;">3</td><td style="text-align:left;">Input</td><td style="text-align:left;">3</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">1</td><td style="text-align:left;">4</td><td style="text-align:left;">Input</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">2</td><td style="text-align:left;">1</td><td style="text-align:left;">Input</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">2</td><td style="text-align:left;">2</td><td style="text-align:left;">Input</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">2</td><td style="text-align:left;">3</td><td style="text-align:left;">Input</td><td style="text-align:left;">3</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">2</td><td style="text-align:left;">4</td><td style="text-align:left;">Input</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">...</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table>',12),l=(0,s.Uk)("The firmware is designed to run on hardware using MCP23017 I/O buffer chips via I2C, e.g. the "),o={href:"https://github.com/SuperHouse/LSC",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("Light Switch Controller"),d=(0,s.Uk)("."),i=(0,s.uE)('<p>A single I2C bus can only support up to a maximum of 8x MCP23017 chips (addresses <code>0x20-0x27</code>). Therefore the maximum number of supported inputs is 128 (i.e. 8x MCP23017s * 16x I/O pins), or 32 ports.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><h3 id="inputs" tabindex="-1"><a class="header-anchor" href="#inputs" aria-hidden="true">#</a> Inputs</h3><p>Each INPUT can be configured by publishing an MQTT message to this topic:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[PREFIX/]conf/CLIENTID[/SUFFIX]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where:</p><ul><li><code>PREFIX</code>: Optional topic prefix if required</li><li><code>CLIENTID</code>: Client id of device, defaults to <code>osm-&lt;MACADDRESS&gt;</code></li><li><code>SUFFIX</code>: Optional topic suffix if required</li></ul><p>The message payload should be JSON and contain:</p>',8),p=(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"Key"),(0,s._)("th",null,"Mandatory"),(0,s._)("th",null,"Value"),(0,s._)("th",null,"Default")])],-1),c=(0,s._)("tr",null,[(0,s._)("td",null,[(0,s._)("code",null,"index")]),(0,s._)("td",null,"Mandatory"),(0,s._)("td",null,"Index of the input to configure"),(0,s._)("td",null,"N/A")],-1),u=(0,s._)("tr",null,[(0,s._)("td",null,[(0,s._)("code",null,"type")]),(0,s._)("td",null,"Optional"),(0,s._)("td",null,[(0,s.Uk)("Either "),(0,s._)("code",null,"button"),(0,s.Uk)(", "),(0,s._)("code",null,"contact"),(0,s.Uk)(", "),(0,s._)("code",null,"rotary"),(0,s.Uk)(", "),(0,s._)("code",null,"switch"),(0,s.Uk)(" or "),(0,s._)("code",null,"toggle")]),(0,s._)("td",null,[(0,s._)("code",null,"switch")])],-1),h=(0,s._)("td",null,[(0,s._)("code",null,"invert")],-1),g=(0,s._)("td",null,"Optional",-1),b=(0,s._)("td",null,[(0,s.Uk)("Either "),(0,s._)("code",null,"true"),(0,s.Uk)(" or "),(0,s._)("code",null,"false")],-1),f=(0,s._)("code",null,"false",-1),m=(0,s.Uk)(),y=(0,s.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Inverting a normally-open (NO) button input will result in a constant stream of <code>hold</code> events!</p></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>To configure input 4 to be a contact sensor:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;contact&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To configure input 7 to be an inverted button:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;invert&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>A retained message will ensure the device auto-configures on startup.</p></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>An input EVENT is reported to a topic of the form:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[PREFIX/]stat/CLIENTID[/SUFFIX]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where;</p><ul><li><code>PREFIX</code>: Optional topic prefix if required</li><li><code>CLIENTID</code>: Client id of device, defaults to <code>osm-&lt;MACADDRESS&gt;</code></li><li><code>SUFFIX</code>: Optional topic suffix if required</li></ul><p>The message payload is JSON and contains:</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td><code>port</code></td><td>Port this event occured on (1-32)</td></tr><tr><td><code>channel</code></td><td>Channel this event occured on (1-4)</td></tr><tr><td><code>index</code></td><td>Index of this event (1-128)</td></tr><tr><td><code>type</code></td><td>Event type (see below)</td></tr><tr><td><code>event</code></td><td>Event (see below)</td></tr></tbody></table><table><thead><tr><th>Event Type</th><th>Event</th></tr></thead><tbody><tr><td><code>button</code></td><td><code>single</code>, <code>double</code>, <code>triple</code>, <code>quad</code>, <code>penta</code>, or <code>hold</code></td></tr><tr><td><code>contact</code></td><td><code>open</code> or <code>closed</code></td></tr><tr><td><code>rotary</code></td><td><code>up</code> or <code>down</code></td></tr><tr><td><code>switch</code></td><td><code>on</code> or <code>off</code></td></tr><tr><td><code>toggle</code></td><td><code>toggle</code></td></tr></tbody></table><h3 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h3><p>A contact opening on input 7;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;channel&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;contact&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;open&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>A triple button click on input 4;</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span> \n  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;channel&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;event&quot;</span><span class="token operator">:</span> <span class="token string">&quot;triple&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="downloads" tabindex="-1"><a class="header-anchor" href="#downloads" aria-hidden="true">#</a> Downloads</h2>',21),x=(0,s.Uk)("Download the latest version of the firmware on "),k={href:"https://github.com/SuperHouse/OXRS-SHA-StateMonitor-ESP32-FW",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Uk)("Github"),w=(0,s.Uk)("."),_=(0,s._)("h2",{id:"supported-hardware",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#supported-hardware","aria-hidden":"true"},"#"),(0,s.Uk)(" Supported Hardware")],-1),I=(0,s.Uk)("This firmware is compatible with the "),q={href:"https://github.com/SuperHouse/LSC",target:"_blank",rel:"noopener noreferrer"},S=(0,s.Uk)("Light Switch Controller"),U=(0,s.Uk)(" (LSC) and is designed to run on the "),T=(0,s.Uk)("RACK32"),E=(0,s.Uk)(" as part of the "),C={href:"https://oxrs.io",target:"_blank",rel:"noopener noreferrer"},P=(0,s.Uk)("OXRS"),N=(0,s.Uk)(" eco-system."),R=(0,s.uE)('<p>The LSC hardware provides 12V power down the cable, which can be used for powering sensors (e.g. PIRs), or illuminating LEDs.</p><p>The sensors or switches should pull one of 4 INPUT wires in the cable to GND to indicate that they have been activated.</p><p>The LSC hardware has physical pull up resistors to pull the INPUT wires high and detects when they are pulled low.</p><p>The RJ45 pinout for each port is;</p><table><thead><tr><th style="text-align:left;">PIN</th><th style="text-align:left;">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">INPUT 1</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">INPUT 2</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">INPUT 3</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">VIN</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">VIN</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">INPUT 4</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">GND</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">GND</td></tr></tbody></table><h4 id="credits" tabindex="-1"><a class="header-anchor" href="#credits" aria-hidden="true">#</a> Credits</h4>',6),A=(0,s._)("li",null,[(0,s.Uk)("Jonathan Oxer "),(0,s._)("a",{href:"mailto:jon@oxer.com.au"},"jon@oxer.com.au")],-1),D=(0,s.Uk)("Ben Jones "),O={href:"https://github.com/sumnerboy12",target:"_blank",rel:"noopener noreferrer"},j=(0,s.Uk)("https://github.com/sumnerboy12"),L=(0,s.Uk)("Moin "),M={href:"https://github.com/moinmoin-sh",target:"_blank",rel:"noopener noreferrer"},F=(0,s.Uk)("https://github.com/moinmoin-sh"),H=(0,s._)("h4",{id:"license",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#license","aria-hidden":"true"},"#"),(0,s.Uk)(" License")],-1),X=(0,s._)("p",null,[(0,s.Uk)("Copyright 2020-2021 SuperHouse Automation Pty Ltd "),(0,s._)("a",{href:"www.superhouse.tv"},"www.superhouse.tv")],-1),W=(0,s._)("p",null,'The software portion of this project is licensed under the Simplified BSD License. The "licence" folder within this project contains a copy of this license in plain text format.',-1),J={render:function(t,e){const n=(0,s.up)("OutboundLink"),J=(0,s.up)("Badge"),K=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[a,(0,s._)("p",null,[l,(0,s._)("a",o,[r,(0,s.Wm)(n)]),d]),i,(0,s._)("table",null,[p,(0,s._)("tbody",null,[c,u,(0,s._)("tr",null,[h,g,b,(0,s._)("td",null,[f,m,(0,s.Wm)(J,{text:"non-inverted"})])])])]),y,(0,s._)("p",null,[x,(0,s._)("a",k,[v,(0,s.Wm)(n)]),w]),_,(0,s._)("p",null,[I,(0,s._)("a",q,[S,(0,s.Wm)(n)]),U,(0,s.Wm)(K,{to:"/docs/hardware/controllers/rack32.html"},{default:(0,s.w5)((()=>[T])),_:1}),E,(0,s._)("a",C,[P,(0,s.Wm)(n)]),N]),R,(0,s._)("ul",null,[A,(0,s._)("li",null,[D,(0,s._)("a",O,[j,(0,s.Wm)(n)])]),(0,s._)("li",null,[L,(0,s._)("a",M,[F,(0,s.Wm)(n)])])]),H,X,W],64)}}}}]);